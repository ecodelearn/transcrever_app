"""
üìä Modelos de dados para jobs de transcri√ß√£o
"""

from enum import Enum
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field
from datetime import datetime


class JobStatus(str, Enum):
    """Status poss√≠veis de um job de transcri√ß√£o."""
    QUEUED = "queued"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class TranscriptionSegment(BaseModel):
    """Segmento individual de transcri√ß√£o."""
    id: str = Field(..., description="ID √∫nico do segmento")
    start: str = Field(..., description="Tempo de in√≠cio (HH:MM:SS.mmm)")
    end: str = Field(..., description="Tempo de fim (HH:MM:SS.mmm)")
    duration: float = Field(..., description="Dura√ß√£o em segundos")
    speaker: str = Field(..., description="ID do orador (SPEAKER_00, SPEAKER_01, etc)")
    text: str = Field(..., description="Texto transcrito")
    confidence: float = Field(..., description="Confian√ßa da transcri√ß√£o (0-1)")
    words: Optional[List[Dict[str, Any]]] = Field(None, description="Palavras individuais com timestamps")
    language: str = Field("pt", description="Idioma detectado")


class SpeakerInfo(BaseModel):
    """Informa√ß√µes sobre um orador identificado."""
    speaker_id: str = Field(..., description="ID do orador")
    first_appearance: str = Field(..., description="Primeira apari√ß√£o (timestamp)")
    total_duration: float = Field(..., description="Tempo total de fala em segundos")
    segment_count: int = Field(..., description="N√∫mero de segmentos")
    confidence: float = Field(..., description="Confian√ßa m√©dia da diariza√ß√£o")


class TranscriptionMetadata(BaseModel):
    """Metadados da transcri√ß√£o."""
    total_duration: float = Field(..., description="Dura√ß√£o total do √°udio em segundos")
    language: str = Field(..., description="Idioma principal detectado")
    model_used: str = Field(..., description="Modelo Whisper utilizado")
    diarization_enabled: bool = Field(..., description="Se diariza√ß√£o foi habilitada")
    processing_time: float = Field(..., description="Tempo de processamento em segundos")
    file_size: int = Field(..., description="Tamanho do arquivo original em bytes")
    audio_quality: Optional[str] = Field(None, description="Qualidade do √°udio detectada")
    speakers_detected: int = Field(0, description="N√∫mero de oradores detectados")
    word_count: int = Field(0, description="N√∫mero total de palavras")
    confidence_avg: float = Field(0.0, description="Confian√ßa m√©dia geral")


class TranscriptionResult(BaseModel):
    """Resultado completo da transcri√ß√£o."""
    segments: List[TranscriptionSegment] = Field(..., description="Segmentos de transcri√ß√£o")
    speakers: Dict[str, SpeakerInfo] = Field(default_factory=dict, description="Informa√ß√µes dos oradores")
    metadata: TranscriptionMetadata = Field(..., description="Metadados da transcri√ß√£o")
    
    @property
    def full_text(self) -> str:
        """Texto completo da transcri√ß√£o."""
        return " ".join([segment.text for segment in self.segments])
    
    @property
    def speakers_list(self) -> List[str]:
        """Lista de IDs dos oradores."""
        return list(self.speakers.keys())


class JobRequest(BaseModel):
    """Request para criar um novo job."""
    model: str = Field("medium", description="Modelo Whisper (tiny, base, small, medium, large)")
    enable_diarization: bool = Field(True, description="Habilitar diariza√ß√£o de oradores")
    language: str = Field("pt", description="Idioma do √°udio")
    
    class Config:
        schema_extra = {
            "example": {
                "model": "medium",
                "enable_diarization": True,
                "language": "pt"
            }
        }


class JobResponse(BaseModel):
    """Response com informa√ß√µes do job."""
    job_id: str = Field(..., description="ID √∫nico do job")
    status: JobStatus = Field(..., description="Status atual do job")
    created_at: str = Field(..., description="Data/hora de cria√ß√£o")
    started_at: Optional[str] = Field(None, description="Data/hora de in√≠cio do processamento")
    completed_at: Optional[str] = Field(None, description="Data/hora de conclus√£o")
    failed_at: Optional[str] = Field(None, description="Data/hora de falha")
    
    filename: str = Field(..., description="Nome do arquivo original")
    file_path: str = Field(..., description="Caminho do arquivo no servidor")
    model: str = Field(..., description="Modelo Whisper utilizado")
    enable_diarization: bool = Field(..., description="Se diariza√ß√£o est√° habilitada")
    language: str = Field(..., description="Idioma configurado")
    
    progress: int = Field(0, description="Progresso do processamento (0-100)")
    message: str = Field("", description="Mensagem de status atual")
    
    result: Optional[TranscriptionResult] = Field(None, description="Resultado da transcri√ß√£o (quando conclu√≠do)")
    error: Optional[str] = Field(None, description="Mensagem de erro (se falhou)")
    
    # URLs para download (quando conclu√≠do)
    download_urls: Optional[Dict[str, str]] = Field(None, description="URLs para download dos resultados")
    
    @property
    def is_completed(self) -> bool:
        """Verifica se o job foi conclu√≠do."""
        return self.status == JobStatus.COMPLETED
    
    @property
    def is_failed(self) -> bool:
        """Verifica se o job falhou."""
        return self.status == JobStatus.FAILED
    
    @property
    def is_processing(self) -> bool:
        """Verifica se o job est√° sendo processado."""
        return self.status == JobStatus.PROCESSING
    
    class Config:
        use_enum_values = True
        schema_extra = {
            "example": {
                "job_id": "550e8400-e29b-41d4-a716-446655440000",
                "status": "completed",
                "created_at": "2024-01-15T10:30:00Z",
                "completed_at": "2024-01-15T10:35:00Z",
                "filename": "reuniao_empresa.mp3",
                "model": "medium",
                "enable_diarization": True,
                "language": "pt",
                "progress": 100,
                "message": "Transcri√ß√£o conclu√≠da com sucesso!",
                "download_urls": {
                    "txt": "/jobs/550e8400-e29b-41d4-a716-446655440000/download/txt",
                    "json": "/jobs/550e8400-e29b-41d4-a716-446655440000/download/json",
                    "srt": "/jobs/550e8400-e29b-41d4-a716-446655440000/download/srt"
                }
            }
        }


class JobsList(BaseModel):
    """Lista de jobs com metadados."""
    jobs: List[JobResponse] = Field(..., description="Lista de jobs")
    total: int = Field(..., description="Total de jobs")
    limit: int = Field(..., description="Limite aplicado")
    offset: int = Field(0, description="Offset aplicado")
    
    class Config:
        schema_extra = {
            "example": {
                "jobs": [],
                "total": 5,
                "limit": 50,
                "offset": 0
            }
        }


class ProgressUpdate(BaseModel):
    """Atualiza√ß√£o de progresso via WebSocket."""
    job_id: str = Field(..., description="ID do job")
    progress: int = Field(..., description="Progresso (0-100)")
    message: str = Field(..., description="Mensagem de status")
    stage: Optional[str] = Field(None, description="Etapa atual (audio_extraction, transcription, etc)")
    estimated_remaining: Optional[int] = Field(None, description="Tempo estimado restante em segundos")
    
    class Config:
        schema_extra = {
            "example": {
                "job_id": "550e8400-e29b-41d4-a716-446655440000",
                "progress": 45,
                "message": "Processando transcri√ß√£o...",
                "stage": "transcription",
                "estimated_remaining": 120
            }
        }


class ErrorResponse(BaseModel):
    """Response padr√£o para erros."""
    error: str = Field(..., description="Tipo do erro")
    message: str = Field(..., description="Mensagem de erro")
    details: Optional[str] = Field(None, description="Detalhes adicionais")
    job_id: Optional[str] = Field(None, description="ID do job relacionado")
    
    class Config:
        schema_extra = {
            "example": {
                "error": "PROCESSING_ERROR",
                "message": "Erro durante o processamento do √°udio",
                "details": "Arquivo corrompido ou formato n√£o suportado",
                "job_id": "550e8400-e29b-41d4-a716-446655440000"
            }
        }


class HealthResponse(BaseModel):
    """Response do health check."""
    status: str = Field(..., description="Status da API")
    timestamp: str = Field(..., description="Timestamp da verifica√ß√£o")
    gpu: Dict[str, Any] = Field(..., description="Informa√ß√µes da GPU")
    environment: str = Field(..., description="Ambiente atual")
    models_available: List[str] = Field(..., description="Modelos dispon√≠veis")
    active_jobs: int = Field(..., description="Jobs ativos")
    
    class Config:
        schema_extra = {
            "example": {
                "status": "healthy",
                "timestamp": "2024-01-15T10:30:00Z",
                "gpu": {
                    "available": True,
                    "name": "NVIDIA GeForce RTX 3060",
                    "memory_gb": 12.0,
                    "cuda_version": "11.8"
                },
                "environment": "development",
                "models_available": ["tiny", "base", "small", "medium", "large"],
                "active_jobs": 2
            }
        }