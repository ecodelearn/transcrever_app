#!/usr/bin/env python3
"""
Script otimizado para transcri√ß√£o de entrevistas jornal√≠sticas brasileiras.
Configurado para m√°xima qualidade e identifica√ß√£o precisa de entrevistador/entrevistado.
"""

import os
import sys
import subprocess
from pathlib import Path

# Configura√ß√µes espec√≠ficas para entrevistas jornal√≠sticas
ENTREVISTA_CONFIG = {
    'WHISPER_MODEL': 'large',
    'OUTPUT_FORMAT': 'txt,json',
    'NUM_SPEAKERS': '2',  # Geralmente entrevistador + entrevistado
    'MIN_SPEAKERS': '2',
    'MAX_SPEAKERS': '3',
    'INTERVIEW_MODE': 'true',
    'VERBOSE_LOGGING': 'true',
    'CONFIDENCE_THRESHOLD': '0.8',
    'AUTO_NORMALIZE_VOLUME': 'true',
    'PORTUGUESE_POSTPROCESSING': 'true',
    'ENABLE_TEXT_CORRECTIONS': 'true',
    'AUDIO_SAMPLE_RATE': '22050'  # Maior qualidade para √°udio jornal√≠stico
}

def processar_entrevista(arquivo_entrada, pasta_saida=None, nome_entrevistado=None):
    """
    Processa uma entrevista com configura√ß√µes otimizadas.
    
    Args:
        arquivo_entrada (str): Caminho para o arquivo de √°udio/v√≠deo
        pasta_saida (str): Pasta de destino para os resultados
        nome_entrevistado (str): Nome do entrevistado para personalizar sa√≠da
    """
    
    if not os.path.exists(arquivo_entrada):
        print(f"‚ùå Arquivo n√£o encontrado: {arquivo_entrada}")
        return False
    
    # Configurar pasta de sa√≠da
    if pasta_saida is None:
        nome_arquivo = Path(arquivo_entrada).stem
        if nome_entrevistado:
            pasta_saida = f"output/entrevista_{nome_entrevistado.replace(' ', '_')}"
        else:
            pasta_saida = f"output/entrevista_{nome_arquivo}"
    
    os.makedirs(pasta_saida, exist_ok=True)
    
    # Aplicar configura√ß√µes
    env = os.environ.copy()
    env.update(ENTREVISTA_CONFIG)
    env['OUTPUT_DIR'] = pasta_saida
    
    if nome_entrevistado:
        env['OUTPUT_PREFIX'] = f"entrevista_{nome_entrevistado.replace(' ', '_')}_"
    
    print(f"üé§ Processando entrevista: {arquivo_entrada}")
    if nome_entrevistado:
        print(f"üë§ Entrevistado: {nome_entrevistado}")
    print(f"üìÅ Resultado ser√° salvo em: {pasta_saida}")
    print("‚öôÔ∏è Configura√ß√µes: Entrevista Jornal√≠stica (M√°xima Qualidade)")
    print("üë• Detectando 2 oradores (entrevistador/entrevistado)...")
    
    # Executar transcri√ß√£o
    comando = [sys.executable, 'transcrever.py', arquivo_entrada]
    
    try:
        resultado = subprocess.run(comando, env=env, capture_output=True, text=True)
        
        if resultado.returncode == 0:
            print("‚úÖ Entrevista processada com sucesso!")
            print(f"üì∞ Material pronto para edi√ß√£o em: {pasta_saida}")
            
            # Gerar arquivo adicional com formata√ß√£o jornal√≠stica
            gerar_formato_jornalistico(pasta_saida, nome_entrevistado)
            return True
        else:
            print(f"‚ùå Erro no processamento: {resultado.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def gerar_formato_jornalistico(pasta_saida, nome_entrevistado):
    """Gera um arquivo formatado especificamente para uso jornal√≠stico."""
    
    try:
        # Buscar arquivo JSON gerado
        arquivos_json = list(Path(pasta_saida).glob("*.json"))
        if not arquivos_json:
            return
        
        import json
        
        with open(arquivos_json[0], 'r', encoding='utf-8') as f:
            transcricao = json.load(f)
        
        # Gerar formato jornal√≠stico
        arquivo_jornalistico = Path(pasta_saida) / "formato_jornalistico.txt"
        
        with open(arquivo_jornalistico, 'w', encoding='utf-8') as f:
            f.write("=" * 60 + "\n")
            f.write("TRANSCRI√á√ÉO PARA USO JORNAL√çSTICO\n")
            f.write("=" * 60 + "\n\n")
            
            if nome_entrevistado:
                f.write(f"ENTREVISTADO: {nome_entrevistado}\n")
            f.write(f"DATA: {Path(arquivos_json[0]).stat().st_mtime}\n")
            f.write("OBSERVA√á√ÉO: Verificar cita√ß√µes antes da publica√ß√£o\n\n")
            
            f.write("-" * 60 + "\n")
            f.write("TRANSCRI√á√ÉO COMPLETA\n")
            f.write("-" * 60 + "\n\n")
            
            orador_atual = None
            for entrada in transcricao:
                if entrada['speaker'] != orador_atual:
                    orador_atual = entrada['speaker']
                    f.write(f"\n[{entrada['speaker']}]: ")
                f.write(entrada['text'] + " ")
        
        print(f"üì∞ Formato jornal√≠stico gerado: {arquivo_jornalistico}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao gerar formato jornal√≠stico: {e}")

def main():
    """Fun√ß√£o principal para execu√ß√£o via linha de comando."""
    
    if len(sys.argv) < 2:
        print("üìã Uso: python entrevista_jornalistica.py <arquivo> [pasta_saida] [nome_entrevistado]")
        print("üìã Exemplo: python entrevista_jornalistica.py entrevista.mp4")
        print("üìã Exemplo: python entrevista_jornalistica.py entrevista.wav resultados/ 'Jo√£o Silva'")
        sys.exit(1)
    
    arquivo = sys.argv[1]
    pasta_saida = sys.argv[2] if len(sys.argv) > 2 else None
    nome_entrevistado = sys.argv[3] if len(sys.argv) > 3 else None
    
    sucesso = processar_entrevista(arquivo, pasta_saida, nome_entrevistado)
    sys.exit(0 if sucesso else 1)

if __name__ == "__main__":
    main()